<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context     
            http://www.springframework.org/schema/context/spring-context.xsd    
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop.xsd 
            http://www.springframework.org/schema/tx  
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd ">

    <!-- 包扫描路径-->
    <context:component-scan base-package="cn.edu.cmu"></context:component-scan>
    <!--<mvc:annotation-driven />-->
    <mvc:annotation-driven conversion-service="conversionService"/>

    <!-- 当访问静态资源, 将请求 交给默认的 default -->
    <mvc:default-servlet-handler/>
    
    <aop:aspectj-autoproxy ></aop:aspectj-autoproxy>

    <context:annotation-config/>


    <!-- 启动任务注册扫描-->
   <!-- <task:annotation-driven />-->


    <!-- 调度工厂  但是创建的是-->
    <bean id="schedulerFactoryBean" name="schedulerFactoryBean"  class="org.springframework.scheduling.quartz.SchedulerFactoryBean"/>

    <!--
        定时任务 Cron表达式 * * * * * ？ 参考如下列表
        https://www.cnblogs.com/hongwz/p/5831036.html

        在线的Cron 生成器
        http://cron.qqe2.com/
    -->
    <bean id="jobManager" class="cn.edu.cmu.quartz.schedule.JobManager">
        <property name="scheduler" ref="schedulerFactoryBean"></property>
        <property name="jobs">
            <list>

                <bean class="cn.edu.cmu.quartz.schedule.ScheduleJob" >
                <property name="jobGroup" value="Hz"/>
                <property name="jobName" value="Hz-job1"/>
                <property name="jobClassName" value="cn.edu.cmu.quartz.job.HzHalfYearValidateJob"/>
                <!--<property name="cronExpression" value="0 0/5 0 0 0 ? *"/>-->
                <property name="cronExpression" value="0 30 8 * * ? *"/>
                <property name="desc" value="护照有效期半年微信提醒"/>
            </bean>
                <bean class="cn.edu.cmu.quartz.schedule.ScheduleJob" >
                    <property name="jobGroup" value="Hz"/>
                    <property name="jobName" value="Hz-job2"/>
                    <property name="jobClassName" value="cn.edu.cmu.quartz.job.HzQiTianTiXingJob"/>
                    <!--<property name="cronExpression" value="0 0/5 0 0 0 ? *"/>-->
                    <property name="cronExpression" value="0 30 8 * * ? *"/>
                    <property name="desc" value="归国之后七天内微信提醒老师归还"/>
                </bean>

            </list>
        </property>
    </bean>



    <bean id="dateConvert" class="cn.edu.cmu.framework.web.DateConvert"/>
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="dateConvert"/>
            </set>
        </property>
    </bean>


    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/business/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>


    <!--multipart解析器 -->
    <!-- 从 post 类型的 请求 中将 文件的 二进制解析成参数的 格式 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="104857600"></property>
    </bean>


   <!-- <bean id="dataSource_back" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>-->


    <!--配置数据源 druid-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="filters" value="stat" />

        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />

        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
    </bean>

    <!-- 让容器 管理SQLSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage" value="com.neusoft.domain"/>

        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>dialect=Oracle</value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 使用Bean工厂管理 Mybatis的 Mapper接口实现类 -->
    <!-- 创建sqlsession并获得某一个接口的 代理对象 -->
    <!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"
        > <property name="mapperInterface" value="com.neusoft.dao.TUserMapper"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> </bean>-->

    <!-- 解决多个Mapper 重复定义 的问题 扫描指定的包下面的 Mapper.java接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.edu.cmu.dao"></property>
        <!-- 注入的是 SQLSessionFactory的Bean的名称 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 事务 事务管理器 + AOP -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="account*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="*insert" propagation="REQUIRED"/>
            <tx:method name="*update" propagation="REQUIRED"/>
            <tx:method name="*delete" propagation="REQUIRED"/>
        </tx:attributes>

    </tx:advice>

    <aop:config>
        <!-- 连接点 -->
        <aop:pointcut expression="execution(public * cn.edu.cmu.service.*.*(..))" id="serviceOperation"/>

        <!-- 通知   使用 advice-ref="txAdvice" advice-ref="txAdvice"引用定义好的   通知 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>




</beans>